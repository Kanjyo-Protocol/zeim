import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import {
  Button,
  Container,
  Flex,
  FormControl,
  FormHelperText,
  FormLabel,
  Input,
  Table,
  TableCaption,
  TableContainer,
  Tbody,
  Td,
  Text,
  Tfoot,
  Th,
  Thead,
  Tr
} from '@chakra-ui/react'
import { useEffect, useMemo, useRef, useState } from 'react'
import client from '../utils/client'
import {
  TokenTransfer,
  TokenTransferQuery
} from '@/graphQL/TokensTransferQuery'
import { useQuery } from '@apollo/client'
import { CSVLink } from 'react-csv'
import { Receiver } from '@/components/Receiver'

const inter = Inter({ subsets: ['latin'] })
export default function Home() {
  const addressRef = useRef(null)
  const [address, setAddress] = useState<string>()
  const walletAddress = useMemo(() => address, [address])
  const { loading, error, data, refetch } = useQuery(TokenTransferQuery, {
    variables: { walletAddress }
  })

  console.log(loading, error, data, address)
  const d = data as { TokenTransfers: { TokenTransfer: TokenTransfer[] } }
  const csvData = useMemo(() => {
    if (!d) {
      return
    }
    return d.TokenTransfers.TokenTransfer.map((transfer: TokenTransfer, i) => {
      return {
        txnData: transfer.blockTimestamp,
        payer: '',
        recipient: '',
        category: 'income',
        purpose: '',
        comment: '',
        fromAddress: transfer.from.addresses,
        toAddress: transfer.to.addresses,
        amount: transfer.formattedAmount,
        tokenName: transfer.token.name,
        token: transfer.token.address,
        txHash: transfer.transactionHash
      }
    })
  }, [d])

  const headers = [
    { label: 'Date', key: 'txnDate' },
    { label: 'Payer', key: 'payer' },
    { label: 'Recipient', key: 'recipient' },
    { label: 'Category', key: 'category' },
    { label: 'Purpose', key: 'purpose' },
    { label: 'Comment', key: 'comment' },
    { label: 'Token', key: 'token' },
    { label: 'Token Name', key: 'tokenName' },
    { label: 'Transaction Hash', key: 'txHash' },
    { label: 'Payer Address', key: 'fromAddress' },
    { label: 'Recipient Address', key: 'toAddress' }
  ]

  useEffect(() => {}, [])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main>
        <Container maxW='container.sm' mt={50}>
          <FormControl>
            <Input
              type='text'
              placeholder='Enter wallet address'
              ref={addressRef}
            />
            <Button
              onClick={() => {
                setAddress((addressRef.current as any)?.value)
                refetch()
              }}
            >
              submit
            </Button>
          </FormControl>
          <Flex>
            {csvData && (
              <CSVLink
                data={csvData}
                headers={headers}
                filename={`transaction-${new Date()}.csv`}
              >
                Export CSV
              </CSVLink>
            )}
          </Flex>
        </Container>
        <Container maxW={'90%'} mt={20}>
          <TableContainer>
            <Table variant='simple'>
              <Thead>
                <Tr>
                  <Th>Date</Th>
                  <Th>Category</Th>
                  <Th isNumeric>Amount</Th>
                  <Th>From</Th>
                  <Th>To</Th>
                  <Th>Token</Th>
                  <Th>Purpose</Th>
                  <Th>Comment</Th>
                </Tr>
              </Thead>
              <Tbody>
                {d &&
                  d.TokenTransfers.TokenTransfer.map((transfer, i) => {
                    const date = new Date(transfer.blockTimestamp)
                    console.log('image', transfer.token.contractMetaData.image)
                    return (
                      <Tr key={i}>
                        <Td>{date.toLocaleDateString('en-US')}</Td>
                        <Td>category</Td>
                        <Td>{transfer.formattedAmount}</Td>
                        <Td>
                          <Receiver
                            address={transfer.from.addresses[0] || ''}
                          />
                        </Td>
                        <Td>
                          <Receiver address={transfer.to.addresses[0] || ''} />
                        </Td>
                        <Td>
                          {transfer.token.contractMetaData.image && (
                            <Image
                              src={transfer.token.contractMetaData.image}
                              alt=''
                            />
                          )}
                          {transfer.token.symbol}
                        </Td>
                        <Td>pay</Td>
                        <Td>comment</Td>
                      </Tr>
                    )
                  })}
              </Tbody>
            </Table>
          </TableContainer>
        </Container>
      </main>
    </>
  )
}
