import Head from 'next/head'
import { Inter } from 'next/font/google'
import {
  Button,
  Container,
  Flex,
  FormControl,
  FormHelperText,
  FormLabel,
  Input,
  Table,
  TableCaption,
  TableContainer,
  Tbody,
  Td,
  Text,
  Tfoot,
  Th,
  Thead,
  Tr,
  Image,
  Spacer,
  VStack,
} from '@chakra-ui/react'
import { useCallback, useEffect, useMemo, useRef, useState } from 'react'
import client from '../utils/client'
import { useQuery } from '@apollo/client'
import { CSVLink } from 'react-csv'
import { useNFTSalesData } from '@/hooks/useNFTSalesData'
import { headers } from '@/utils/csvHeader'

export default function Home() {
  const addressRef = useRef<HTMLInputElement>(null)
  const [addresses, setAddresses] = useState<string[]>()
  const [address, setAddress] = useState<string>()
  const targetAddress = useMemo(() => addresses, [addresses])
  const nftData = useNFTSalesData(targetAddress)

  console.log('value', address)
  const handleAddAddress = useCallback(() => {
    if (!address || address == '') {
      return
    }

    setAddresses((prev) => {
      if (prev) {
        return [...prev, address]
      }
      return [address]
    })
    setAddress('')
  }, [address])

  const csvData = nftData.csvData
  useEffect(() => {}, [])
  console.log('nftData', nftData)
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main>
        <Container maxW='container.sm' mt={50}>
          <FormControl>
            <Input
              type='text'
              placeholder='Enter wallet address'
              value={address}
              onChange={({ target }) => setAddress(target.value)}
            />
            <Button onClick={handleAddAddress}>Add Address</Button>
          </FormControl>
          <Text>Registered Address</Text>
          <Text fontSize={'sm'} color={'gray'}>
            {addresses?.join(', ')}
          </Text>
          <Flex>
            {csvData && (
              <CSVLink
                data={csvData}
                headers={headers}
                filename={`transaction-${new Date()}.csv`}
              >
                Export CSV
              </CSVLink>
            )}
          </Flex>
        </Container>
        <Container maxW={'90%'} mt={20}>
          <TableContainer>
            <Table variant='simple'>
              <Thead>
                <Tr>
                  <Th>Date</Th>
                  <Th>Category</Th>
                  <Th isNumeric>Amount</Th>
                  <Th>From</Th>
                  <Th>To</Th>
                  <Th>NFT Transfer</Th>
                  <Th>Purpose</Th>
                  <Th>Comment</Th>
                </Tr>
              </Thead>
              <Tbody>
                {nftData?.data &&
                  nftData.data.map((nft, i) => {
                    const date = new Date(nft.txnDate)
                    return (
                      <Tr key={i}>
                        <Td>{date.toLocaleDateString('en-US')}</Td>
                        <Td>category</Td>
                        <Td>
                          {nft.amount}({nft.amountUSDC} USDC)
                        </Td>
                        <Td>{nft.from}</Td>
                        <Td>{nft.to}</Td>
                        <Td>
                          {nft.nftTransfer && nft.nftTransfer && (
                            <>
                              <Flex>
                                <Image
                                  src={nft.nftTransfer.nft.image?.replace(
                                    'ipfs://',
                                    'https://ipfs.io/ipfs/'
                                  )}
                                  alt={nft.nftTransfer.nft.name}
                                  width={10}
                                  height={10}
                                />
                              </Flex>
                              <VStack>
                                <Text>
                                  tokenId: {nft.nftTransfer.nft.tokenId}
                                </Text>
                                <Spacer />
                                <Text>
                                  {nft.nftTransfer.from.slice(0, 5)} {'->'}{' '}
                                  {nft.nftTransfer.to.slice(0, 5)}
                                </Text>
                              </VStack>
                            </>
                          )}
                        </Td>
                        <Td>{nft.purpose}</Td>
                        <Td>{nft.comment}</Td>
                      </Tr>
                    )
                  })}
              </Tbody>
            </Table>
          </TableContainer>
        </Container>
      </main>
    </>
  )
}

